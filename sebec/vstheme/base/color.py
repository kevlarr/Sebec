"""Autogenerated via `poetry run update-colors`."""
import enum

from .style import ColorStyle, TokenStyle


__all__ = ["Color"]


class Color(enum.StrEnum):
    Cedar0 = "#627e4e"
    Cedar1 = "#759a5b"
    Cedar2 = "#8aae6f"
    Cedar3 = "#9fbf88"
    Cerulean0 = "#437789"
    Cerulean1 = "#4e90a6"
    Cerulean2 = "#62a5bc"
    Cerulean3 = "#7bb7cc"
    Sapphire0 = "#405c82"
    Sapphire1 = "#4a6a96"
    Sapphire2 = "#6988b5"
    Sapphire3 = "#849ec2"
    Shine0 = "#9fa9bc"
    Shine1 = "#abb3c4"
    Shine2 = "#b6bece"
    Shine3 = "#c0c8d8"
    Shine4 = "#ccd3e0"
    Shine5 = "#d9dee8"
    Shine6 = "#e5e9f0"
    Shine7 = "#edf0f5"
    SolarOrange0 = "#c67053"
    SolarOrange1 = "#d28f79"
    SolarPurple0 = "#a9709f"
    SolarPurple1 = "#bc8fb5"
    SolarRed0 = "#a1454d"
    SolarRed1 = "#ba5e66"
    SolarYellow0 = "#e4bb67"
    SolarYellow1 = "#ecce93"
    Spruce0 = "#4e7e62"
    Spruce1 = "#5b9a75"
    Spruce2 = "#6fae8a"
    Spruce3 = "#88bf9f"
    Sunrise0 = "#b6b5af"
    Sunrise1 = "#c1bfb9"
    Sunrise2 = "#cac9c4"
    Sunrise3 = "#d5d4cd"
    Sunrise4 = "#dfded8"
    Sunrise5 = "#e8e7e3"
    Sunrise6 = "#efefeb"
    Sunrise7 = "#f6f6f4"
    Twilight0 = "#15181e"
    Twilight1 = "#1b1f27"
    Twilight2 = "#212630"
    Twilight3 = "#2e3440"
    Twilight4 = "#3b4352"
    Twilight5 = "#444d5e"
    Twilight6 = "#556077"
    Twilight7 = "#4c566a"

    def alpha(self, alpha: float) -> ColorStyle:
        """Returns a new `ColorStyle` for the color with the specified alpha level."""
        return ColorStyle(foreground=self.value, alpha=_clamp_alpha(alpha))

    def serialize(self) -> str:
        return self.value

    def style(
        self,
        *,
        alpha: float = None,
        bold: bool = None,
        italic: bool = None,
        underline: bool = None,
    ) -> TokenStyle:
        """Returns a new `TokenStyle` for the color and specified token style options."""
        if alpha is not None:
            alpha = _clamp_alpha(alpha)

        return TokenStyle(
            foreground=self.value,
            alpha=alpha,
            bold=bold,
            italic=italic,
            underline=underline,
        )


def _clamp_alpha(alpha: float) -> float:
    # Restricts alpha to [0.0, 1.0]
    return max(0.0, min(1.0, alpha))

