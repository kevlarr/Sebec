import pathlib
import re
import shutil
import sys
from xml.dom import minidom


DESIGN_PATH = (
    pathlib.Path(__file__)
    .parent # scripts
    .parent # sebec
    .parent # root
    / "design"
)

COLOR_MODULE_PATH = (
    pathlib.Path(__file__)
    .parent # scripts
    .parent # sebec
    / "color.py"
)

TEMPLATE = '''"""Autogenerated via `poetry run update-colors {source_filename}`."""
import dataclasses
import enum


__all__ = ["Color", "ColorStyle"]


@dataclasses.dataclass(eq=True, frozen=True)
class ColorStyle:
    """"""
    foreground: str
    """Hexadecimal color code, with or without alpha level"""

    alpha: float | None = None
    """Alpha level in the range [0.0, 1.0]"""

    def __str__(self) -> str:
        """Returns a string representation of the color with alpha level, if present."""
        if self.alpha is not None:
            return f"{{self.foreground}}{{int(self.alpha * 255):02x}}"
        return self.foreground


class Color(enum.StrEnum):
{members}

    def alpha(self, alpha: float) -> ColorStyle:
        """Returns a new `ColorStyle` for the color with the specified alpha level."""
        return ColorStyle(foreground=self.value, alpha=_clamp_alpha(alpha))


def _clamp_alpha(alpha: float) -> float:
    # Restricts alpha to [0.0, 1.0]
    return max(0.0, min(1.0, alpha))
'''


def main():
    source_path = DESIGN_PATH / sys.argv[1]
    palette_path = DESIGN_PATH / "palette.svg"

    shutil.copy(source_path, palette_path)

    colors = []

    with open(source_path) as svg_file:
        doc = minidom.parse(svg_file)  # parseString also exists
        for element in doc.getElementsByTagName("*"):
            style = element.attributes.get("style")
            if not style: continue

            match = re.match("fill:(#[a-fA-F0-9]{3,6});", style.value)
            if not match: continue

            colors.append({
                "name": element.attributes["id"].value,
                "code": match.group(1),
            })

        doc.unlink()

    distinct_names = set(color["name"] for color in colors)

    assert len(distinct_names) == len(colors), "Duplicate color names found"

    with open(COLOR_MODULE_PATH, "w") as py_file:
        members = [f'    {color["name"]} = "{color["code"]}"' for color in colors]
        joined = "\n".join(sorted(members))
        py_file.write(TEMPLATE.format(members=joined, source_filename=sys.argv[1]))


if __name__ == "__main__":
    main()
