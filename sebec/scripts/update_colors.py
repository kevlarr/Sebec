import pathlib
import re
from xml.dom import minidom


PALETTE_PATH = (
    pathlib.Path(__file__).parent.parent.parent /
    "design/palette.svg"
)

COLOR_MODULE_PATH = (
    pathlib.Path(__file__).parent.parent /
    "vstheme/base/color.py"
)

TEMPLATE = '''"""Autogenerated via `poetry run update-colors`."""
import enum

from .style import ColorStyle, TokenStyle


__all__ = ["Color"]


class Color(enum.StrEnum):
{members}

    def alpha(self, alpha: float) -> ColorStyle:
        """Returns a new `ColorStyle` for the color with the specified alpha level."""
        return ColorStyle(foreground=self.value, alpha=_clamp_alpha(alpha))

    def serialize(self) -> str:
        return self.value

    def style(
        self,
        *,
        alpha: float = None,
        bold: bool = None,
        italic: bool = None,
        underline: bool = None,
    ) -> TokenStyle:
        """Returns a new `TokenStyle` for the color and specified token style options."""
        if alpha is not None:
            alpha = _clamp_alpha(alpha)

        return TokenStyle(
            foreground=self.value,
            alpha=alpha,
            bold=bold,
            italic=italic,
            underline=underline,
        )


def _clamp_alpha(alpha: float) -> float:
    # Restricts alpha to [0.0, 1.0]
    return max(0.0, min(1.0, alpha))

'''


def main():
    colors = []

    with open(PALETTE_PATH) as svg_file:
        doc = minidom.parse(svg_file)  # parseString also exists
        for element in doc.getElementsByTagName("*"):
            style = element.attributes.get("style")
            if not style: continue

            match = re.match("fill:(#[a-fA-F0-9]{6,8});", style.value)
            if not match: continue

            colors.append({
                "name": element.attributes["id"].value,
                "code": match.group(1),
            })

        doc.unlink()

    distinct_names = set(color["name"] for color in colors)

    assert len(distinct_names) == len(colors), "Duplicate color names found"

    with open(COLOR_MODULE_PATH, "w") as py_file:
        members = [f'    {color["name"]} = "{color["code"]}"' for color in colors]
        joined = "\n".join(sorted(members))
        py_file.write(TEMPLATE.format(members=joined))


if __name__ == "__main__":
    main()
