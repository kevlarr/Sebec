"""Autogenerated via `poetry run update-colors` based on `sebec-v3.svg`."""
import dataclasses
import enum


__all__ = ["Color", "ColorStyle"]


@dataclasses.dataclass(eq=True, frozen=True)
class ColorStyle:
    """"""
    foreground: str
    """Hexadecimal color code, with or without alpha level"""

    alpha: float | None = None
    """Alpha level in the range [0.0, 1.0]"""

    def __str__(self) -> str:
        """Returns a string representation of the color with alpha level, if present."""
        if self.alpha is not None:
            return f"{self.foreground}{int(self.alpha * 255):02x}"
        return self.foreground


class Color(enum.StrEnum):
    Cedar0 = "#627e4e"
    Cedar1 = "#759a5b"
    Cedar2 = "#8aae6f"
    Cedar3 = "#9fbf88"
    Cerulean0 = "#3d7a8f"
    Cerulean1 = "#499bb6"
    Cerulean2 = "#69b1c9"
    Cerulean3 = "#8cc6d9"
    Sapphire0 = "#3d5f8f"
    Sapphire1 = "#4976b6"
    Sapphire2 = "#6991c9"
    Sapphire3 = "#8cacd9"
    Shine0 = "#9fa9bc"
    Shine1 = "#abb3c4"
    Shine2 = "#b6bece"
    Shine3 = "#c0c8d8"
    Shine4 = "#ccd3e0"
    Shine5 = "#d9dee8"
    Shine6 = "#e5e9f0"
    Shine7 = "#edf0f5"
    SolarOrange0 = "#c67053"
    SolarOrange1 = "#d28f79"
    SolarPurple0 = "#a9709f"
    SolarPurple1 = "#bc8fb5"
    SolarRed0 = "#a1454d"
    SolarRed1 = "#ba5e66"
    SolarYellow0 = "#e4bb67"
    SolarYellow1 = "#ecce93"
    Spruce0 = "#4e7e62"
    Spruce1 = "#5b9a75"
    Spruce2 = "#6fae8a"
    Spruce3 = "#88bf9f"
    Sunrise0 = "#9d9c95"
    Sunrise1 = "#aeaca3"
    Sunrise2 = "#bcbab3"
    Sunrise3 = "#cbcac2"
    Sunrise4 = "#d6d4cd"
    Sunrise5 = "#e3e2dd"
    Sunrise6 = "#edece8"
    Sunrise7 = "#f6f6f4"
    Twilight0 = "#0d0e12"
    Twilight1 = "#13161b"
    Twilight2 = "#1b1f27"
    Twilight3 = "#242932"
    Twilight4 = "#313744"
    Twilight5 = "#3c4453"
    Twilight6 = "#556077"
    Twilight7 = "#485265"

    def alpha(self, alpha: float) -> ColorStyle:
        """Returns a new `ColorStyle` for the color with the specified alpha level."""
        return ColorStyle(foreground=self.value, alpha=_clamp_alpha(alpha))


def _clamp_alpha(alpha: float) -> float:
    # Restricts alpha to [0.0, 1.0]
    return max(0.0, min(1.0, alpha))
